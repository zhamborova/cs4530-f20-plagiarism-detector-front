{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx\";\nimport React from \"react\";\nimport './code.css';\n\nclass Code extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contents: {},\n      map: {}\n    };\n\n    this.highlight = i => {\n      let col = \"\";\n      col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\";\n      this.props.similarities.forEach(s => {\n        if (s.id === this.props.current && s.startLine <= i && i <= s.endLine) {\n          col = \"red-current\";\n        }\n      });\n      return col;\n    };\n\n    this.setRef = (i, elem) => {\n      this.props.similarities.forEach(s => {\n        if (i === s.startLine) {\n          this[`${s.id}`] = elem;\n          console.log(); // var mapOld: { [key: string]: HTMLElement } = this.state.map;\n          // mapOld[s.id] = elem;\n          // this.setState({map: mapOld});\n        }\n      });\n    };\n\n    this.getKeyValue = (obj, key) => obj[key];\n  }\n\n  componentDidMount() {\n    let {\n      current,\n      contents\n    } = this.props;\n\n    if (current) {// setTimeout(() => {\n      //     if(this[current]) {\n      //         this[current].scrollIntoView()\n      //     }\n      // }, 10);\n    }\n\n    if (contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let {\n      current,\n      contents\n    } = this.props;\n    console.log(Code);\n\n    if (prevProps && prevProps.current !== current) {// setTimeout(() => {\n      //\n      //     if(Code[current]!==null) {\n      //\n      //         this[current].scrollIntoView({behavior:\"smooth\"})\n      //     }\n      // }, 10);\n    }\n\n    if (prevProps && prevProps.contents !== contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-container\",\n      children: Object.keys(this.state.contents).map((key, i) => /*#__PURE__*/_jsxDEV(\"code\", {\n        className: this.highlight(i),\n        ref: elem => this.setRef(i, {}),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"index\",\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), this.getKeyValue(this.state.contents, key)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx"],"names":["React","Code","Component","state","contents","map","highlight","i","col","props","similarities","some","s","startLine","endLine","forEach","id","current","setRef","elem","console","log","getKeyValue","obj","key","componentDidMount","setState","componentDidUpdate","prevProps","prevState","snapshot","render","Object","keys"],"mappings":"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","sourcesContent":["import React, {HTMLFactory} from \"react\";\nimport './code.css'\nimport {Similarity} from \"../file/file-interfaces\";\n\ninterface CodeProps {\n    contents: { [key: string]: string},\n    current:string,\n    similarities: (Similarity)[]\n}\ninterface CodeState {\n    contents: { [key: string]: string},\n    map: { [key: string]: HTMLElement}\n}\n\nclass Code extends React.Component<CodeProps,CodeState>{\n\n\n    state={\n      contents: {},\n      map: {}\n    }\n\n    componentDidMount() {\n        let {current, contents} = this.props\n\n        if(current){\n            // setTimeout(() => {\n            //     if(this[current]) {\n            //         this[current].scrollIntoView()\n            //     }\n            // }, 10);\n\n        }\n        if(contents){\n            this.setState({contents})\n        }\n    }\n\n\n    componentDidUpdate(prevProps:CodeProps, prevState:CodeState, snapshot:any) {\n        let {current, contents} = this.props\n        console.log(Code)\n        if(prevProps && prevProps.current !== current){\n            // setTimeout(() => {\n            //\n            //     if(Code[current]!==null) {\n            //\n            //         this[current].scrollIntoView({behavior:\"smooth\"})\n            //     }\n            // }, 10);\n        }\n\n        if(prevProps && prevProps.contents !== contents){\n            this.setState({contents})\n        }\n\n    }\n\n\n\n\n    highlight = (i:number) =>{\n\n        let col = \"\"\n        col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\"\n        this.props.similarities.forEach(s => {\n            if(s.id === this.props.current && s.startLine <= i && i <= s.endLine){\n                col = \"red-current\"\n            }\n\n        })\n\n        return col;\n    }\n\n    //map ref to similarity id\n    setRef = (i:number, elem:any) =>{\n        this.props.similarities.forEach(s => {\n\n            if(i === s.startLine) {\n                this[`${s.id}`] = elem\n                console.log()\n                // var mapOld: { [key: string]: HTMLElement } = this.state.map;\n                // mapOld[s.id] = elem;\n                // this.setState({map: mapOld});\n            }\n\n       })\n\n    }\n\n    //fiiiixxxxx\n    // @ts-ignore\n    getKeyValue = <T, String extends keyof T>(obj: {}, key: string): T[String] => obj[key];\n\n\n    render() {\n\n        return <div className=\"file-container\">\n\n\n            {Object.keys(this.state.contents).map((key, i) => (\n\n                <code key={i} className={this.highlight(i)}\n                      ref={elem =>this.setRef(i, {})}>\n\n                    <span className=\"index\" >{i}</span>\n                    {this.getKeyValue(this.state.contents, key)}\n                 </code>))\n            }\n        </div>\n    }\n}\n\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}