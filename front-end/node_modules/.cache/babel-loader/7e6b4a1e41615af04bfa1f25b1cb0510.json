{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx\";\nimport React from \"react\";\nimport './code.css';\n\n/**\n * @class Code\n * This class is responsible for displaying code on Plagiarism page\n * @description It highlights plagiarized code and keeps track of the current similarity\n * the user is a looking at\n */\nclass Code extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.domRefs = {};\n\n    this.highlight = i => {\n      let col = \"\";\n      this.props.similarities.forEach(s => {\n        if (s.id === this.props.curSimilarityId && s.startLine <= i && i <= s.endLine) {\n          col = \"red-current\";\n        } else if (s.startLine <= i && i <= s.endLine) {\n          col = \"red\";\n        } else return \"\";\n      });\n      return col;\n    };\n\n    this.setRef = (i, elem) => {\n      this.props.similarities.forEach(s => {\n        if (i === s.startLine) {\n          this.domRefs[`${s.id}`] = elem;\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    let {\n      curSimilarityId\n    } = this.props;\n\n    if (curSimilarityId) {\n      if (this.domRefs[curSimilarityId]) {\n        this.domRefs[curSimilarityId].scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let {\n      curSimilarityId,\n      contents\n    } = this.props;\n\n    if (prevProps.curSimilarityId !== curSimilarityId) {\n      if (this.domRefs[curSimilarityId]) {\n        this.domRefs[curSimilarityId].scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    }\n  } //highlight plagiarized code\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-container\",\n      children: Object.keys(this.props.contents).map((key, i) => /*#__PURE__*/_jsxDEV(\"code\", {\n        className: this.highlight(i),\n        ref: elem => this.setRef(i, elem),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"index\",\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), this.props.contents[key]]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx"],"names":["React","Code","Component","domRefs","highlight","i","col","props","similarities","forEach","s","id","curSimilarityId","startLine","endLine","setRef","elem","componentDidMount","scrollIntoView","behavior","componentDidUpdate","prevProps","prevState","snapshot","contents","render","Object","keys","map","key"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAuD;AAAA;AAAA;AAAA,SAC3CC,OAD2C,GAC5B,EAD4B;;AAAA,SAkCnDC,SAlCmD,GAkCtCC,CAAD,IAAa;AACrB,UAAIC,GAAG,GAAG,EAAV;AACA,WAAKC,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,CAAC,IAAI;AACjC,YAAGA,CAAC,CAACC,EAAF,KAAS,KAAKJ,KAAL,CAAWK,eAApB,IAAuCF,CAAC,CAACG,SAAF,IAAeR,CAAtD,IAA2DA,CAAC,IAAIK,CAAC,CAACI,OAArE,EAA6E;AACzER,UAAAA,GAAG,GAAG,aAAN;AACH,SAFD,MAGK,IAAGI,CAAC,CAACG,SAAF,IAAeR,CAAf,IAAoBA,CAAC,IAAIK,CAAC,CAACI,OAA9B,EAAuC;AACxCR,UAAAA,GAAG,GAAG,KAAN;AACH,SAFI,MAGA,OAAO,EAAP;AACR,OARD;AAUA,aAAOA,GAAP;AACH,KA/CkD;;AAAA,SAkDnDS,MAlDmD,GAkD1C,CAACV,CAAD,EAAWW,IAAX,KAAuB;AAC5B,WAAKT,KAAL,CAAWC,YAAX,CAAwBC,OAAxB,CAAgCC,CAAC,IAAI;AACjC,YAAGL,CAAC,KAAKK,CAAC,CAACG,SAAX,EAAsB;AACpB,eAAKV,OAAL,CAAc,GAAEO,CAAC,CAACC,EAAG,EAArB,IAA0BK,IAA1B;AACD;AAEL,OALA;AAOH,KA1DkD;AAAA;;AAKnDC,EAAAA,iBAAiB,GAAG;AAChB,QAAI;AAACL,MAAAA;AAAD,QAAoB,KAAKL,KAA7B;;AACA,QAAGK,eAAH,EAAmB;AACX,UAAG,KAAKT,OAAL,CAAaS,eAAb,CAAH,EAAkC;AAE9B,aAAKT,OAAL,CAAaS,eAAb,EAA8BM,cAA9B,CAA6C;AAACC,UAAAA,QAAQ,EAAC;AAAV,SAA7C;AACH;AACR;AACJ;;AAGDC,EAAAA,kBAAkB,CAACC,SAAD,EAAsBC,SAAtB,EAA2CC,QAA3C,EAAyD;AACvE,QAAI;AAACX,MAAAA,eAAD;AAAkBY,MAAAA;AAAlB,QAA8B,KAAKjB,KAAvC;;AAEA,QAAGc,SAAS,CAACT,eAAV,KAA8BA,eAAjC,EAAiD;AAGzC,UAAG,KAAKT,OAAL,CAAaS,eAAb,CAAH,EAAkC;AAC9B,aAAKT,OAAL,CAAaS,eAAb,EAA8BM,cAA9B,CAA6C;AAACC,UAAAA,QAAQ,EAAC;AAAV,SAA7C;AACH;AAER;AAGJ,GA7BkD,CAiCvD;;;AA4BIM,EAAAA,MAAM,GAAG;AAEL,wBAAO;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACFC,MAAM,CAACC,IAAP,CAAY,KAAKpB,KAAL,CAAWiB,QAAvB,EAAiCI,GAAjC,CAAqC,CAACC,GAAD,EAAMxB,CAAN,kBAElC;AAAc,QAAA,SAAS,EAAE,KAAKD,SAAL,CAAeC,CAAf,CAAzB;AACM,QAAA,GAAG,EAAEW,IAAI,IAAG,KAAKD,MAAL,CAAYV,CAAZ,EAAeW,IAAf,CADlB;AAAA,gCAEI;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA,oBAA0BX;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKE,KAAL,CAAWiB,QAAX,CAAoBK,GAApB,CAHL;AAAA,SAAWxB,CAAX;AAAA;AAAA;AAAA;AAAA,cAFH;AADE;AAAA;AAAA;AAAA;AAAA,YAAP;AAUH;;AAzEkD;;AA6EvD,eAAeJ,IAAf","sourcesContent":["import React from \"react\";\nimport './code.css'\nimport {Similarity} from \"../file/file.utils\";\n\ninterface CodeProps {\n    contents: { [key: string]: string},\n    curSimilarityId:string,\n    similarities: (Similarity)[]\n}\ninterface CodeState {\n    contents: { [key: string]: string},\n    map: { [key: string]: HTMLElement},\n\n}\n\n/**\n * @class Code\n * This class is responsible for displaying code on Plagiarism page\n * @description It highlights plagiarized code and keeps track of the current similarity\n * the user is a looking at\n */\nclass Code extends React.Component<CodeProps,CodeState>{\n    private domRefs: any = {}\n\n\n\n    componentDidMount() {\n        let {curSimilarityId} = this.props\n        if(curSimilarityId){\n                if(this.domRefs[curSimilarityId]) {\n\n                    this.domRefs[curSimilarityId].scrollIntoView({behavior:\"smooth\"})\n                }\n        }\n    }\n\n\n    componentDidUpdate(prevProps:CodeProps, prevState:CodeState, snapshot:any) {\n        let {curSimilarityId, contents} = this.props\n\n        if(prevProps.curSimilarityId !== curSimilarityId){\n\n\n                if(this.domRefs[curSimilarityId]) {\n                    this.domRefs[curSimilarityId].scrollIntoView({behavior:\"smooth\"})\n                }\n\n        }\n\n\n    }\n\n\n\n//highlight plagiarized code\n    highlight = (i:number) =>{\n        let col = \"\"\n        this.props.similarities.forEach(s => {\n            if(s.id === this.props.curSimilarityId && s.startLine <= i && i <= s.endLine){\n                col = \"red-current\"\n            }\n            else if(s.startLine <= i && i <= s.endLine) {\n                col = \"red\";\n            }\n            else return \"\"\n        })\n\n        return col;\n    }\n\n    //map ref to similarity id\n    setRef = (i:number, elem:any) =>{\n        this.props.similarities.forEach(s => {\n            if(i === s.startLine) {\n              this.domRefs[`${s.id}`] = elem\n            }\n\n       })\n\n    }\n\n\n    render() {\n\n        return <div className=\"file-container\">\n            {Object.keys(this.props.contents).map((key, i) => (\n\n                <code key={i} className={this.highlight(i)}\n                      ref={elem =>this.setRef(i, elem)}>\n                    <span className=\"index\" >{i}</span>\n                    {this.props.contents[key]}\n                 </code>))\n            }\n        </div>\n    }\n}\n\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}