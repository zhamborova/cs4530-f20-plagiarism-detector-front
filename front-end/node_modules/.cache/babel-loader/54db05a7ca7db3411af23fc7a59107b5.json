{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx\";\nimport React from \"react\";\nimport './code.css';\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.highlight = i => {\n      let col = \"\";\n      col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\";\n      this.props.similarities.forEach(s => {\n        if (s.id === this.props.current && s.startLine <= i && i <= s.endLine) {\n          col = \"red-current\";\n        }\n      });\n      return col;\n    };\n\n    this.setRef = (i, elem) => {\n      this.props.similarities.forEach(s => {\n        if (i === s.startLine) {\n          // this[`${s.id}`] = elem\n          console.log(this[`${s.id}`] = elem);\n          console.log(); // var mapOld: { [key: string]: HTMLElement } = this.state.map;\n          // mapOld[s.id] = elem;\n          // this.setState({map: mapOld});\n        }\n      });\n    };\n\n    this.getKeyValue = (obj, key) => obj[key];\n\n    props.similarities.forEach(s => {\n      this[`${s.id}`] = /*#__PURE__*/React.createRef();\n    });\n    this.state = {\n      contents: {},\n      map: {}\n    };\n  }\n\n  componentDidMount() {\n    let {\n      current,\n      contents\n    } = this.props;\n\n    if (current) {// setTimeout(() => {\n      //     if(this[current]) {\n      //         this[current].scrollIntoView()\n      //     }\n      // }, 10);\n    }\n\n    if (contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let {\n      current,\n      contents\n    } = this.props;\n    console.log(Code);\n\n    if (prevProps.current !== current) {// setTimeout(() => {\n      //\n      //     if(Code[current]!==null) {\n      //\n      //         this[current].scrollIntoView({behavior:\"smooth\"})\n      //     }\n      // }, 10);\n    }\n\n    if (prevProps.contents !== contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-container\",\n      children: Object.keys(this.state.contents).map((key, i) => /*#__PURE__*/_jsxDEV(\"code\", {\n        className: this.highlight(i),\n        ref: elem => this.setRef(i, {}),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"index\",\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), this.getKeyValue(this.state.contents, key)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx"],"names":["React","Code","Component","constructor","props","highlight","i","col","similarities","some","s","startLine","endLine","forEach","id","current","setRef","elem","console","log","getKeyValue","obj","key","createRef","state","contents","map","componentDidMount","setState","componentDidUpdate","prevProps","prevState","snapshot","render","Object","keys"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './code.css'\nimport {Similarity} from \"../file/file-interfaces\";\n\ninterface CodeProps {\n    contents: { [key: string]: string},\n    current:string,\n    similarities: (Similarity)[]\n}\ninterface CodeState {\n    contents: { [key: string]: string},\n    map: { [key: string]: HTMLElement},\n\n}\n\ninterface CodeIndex {\n\n}\n\n\nclass Code extends React.Component<CodeProps,CodeState> implements CodeIndex{\n\n    constructor(props:CodeProps) {\n        super(props)\n        props.similarities.forEach(s => {\n\n            this[`${s.id}`] = React.createRef()\n        });\n\n        this.state={\n            contents: {},\n            map: {},\n\n        }\n\n    }\n\n\n\n    componentDidMount() {\n        let {current, contents} = this.props\n\n        if(current){\n            // setTimeout(() => {\n            //     if(this[current]) {\n            //         this[current].scrollIntoView()\n            //     }\n            // }, 10);\n\n        }\n        if(contents){\n            this.setState({contents})\n        }\n    }\n\n\n    componentDidUpdate(prevProps:CodeProps, prevState:CodeState, snapshot:any) {\n        let {current, contents} = this.props\n        console.log(Code)\n        if(prevProps.current !== current){\n            // setTimeout(() => {\n            //\n            //     if(Code[current]!==null) {\n            //\n            //         this[current].scrollIntoView({behavior:\"smooth\"})\n            //     }\n            // }, 10);\n        }\n\n        if(prevProps.contents !== contents){\n            this.setState({contents})\n        }\n\n    }\n\n\n\n\n    highlight = (i:number) =>{\n\n        let col = \"\"\n        col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\"\n        this.props.similarities.forEach(s => {\n            if(s.id === this.props.current && s.startLine <= i && i <= s.endLine){\n                col = \"red-current\"\n            }\n\n        })\n\n        return col;\n    }\n\n    //map ref to similarity id\n    setRef = (i:number, elem:any) =>{\n        this.props.similarities.forEach(s => {\n\n            if(i === s.startLine) {\n              // this[`${s.id}`] = elem\n                console.log(this[`${s.id}`] = elem)\n                console.log()\n                // var mapOld: { [key: string]: HTMLElement } = this.state.map;\n                // mapOld[s.id] = elem;\n                // this.setState({map: mapOld});\n            }\n\n       })\n\n    }\n\n    //fiiiixxxxx\n    // @ts-ignore\n    getKeyValue = <T, K extends keyof T>(obj: {}, key: K) => obj[key];\n\n\n    render() {\n\n        return <div className=\"file-container\">\n\n\n            {Object.keys(this.state.contents).map((key, i) => (\n\n                <code key={i} className={this.highlight(i)}\n                      ref={elem =>this.setRef(i, {})}>\n\n                    <span className=\"index\" >{i}</span>\n                    {this.getKeyValue(this.state.contents, key)}\n                 </code>))\n            }\n        </div>\n    }\n}\n\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}