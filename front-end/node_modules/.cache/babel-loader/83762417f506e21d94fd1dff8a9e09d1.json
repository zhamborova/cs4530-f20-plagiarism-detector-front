{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/file/file.tsx\";\nimport React from \"react\";\nconst color = \"rgb(235, 233, 233)\";\n/**\n * @class File\n * Represents a file in a directory\n * @description If the file contains the current similarity the user is looking at\n * It will send the contents of this file to Code class through parent(Plagiarism)\n */\n\nclass File extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      highlight: \"transparent\"\n    };\n  }\n\n  componentDidMount() {\n    this.highlightFile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let {\n      current\n    } = this.props;\n    prevProps.current !== current ? this.highlightFile() : this.setState({\n      highlight: \"transparent\"\n    });\n  }\n  /**\n   * set color of the file in dir if it contains the current similarity\n   */\n\n\n  highlightFile() {\n    let {\n      item,\n      setFile,\n      current\n    } = this.props;\n\n    if (item.similarities.some(s => s.id === current)) {\n      setFile(item);\n      this.setState({\n        highlight: color\n      });\n    }\n  }\n\n  render() {\n    let {\n      item,\n      setFile\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `d-block`,\n      style: {\n        backgroundColor: this.state.highlight\n      },\n      onClick: () => setFile(item),\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default File;","map":{"version":3,"sources":["/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/file/file.tsx"],"names":["React","color","File","Component","constructor","props","state","highlight","componentDidMount","highlightFile","componentDidUpdate","prevProps","prevState","snapshot","current","setState","item","setFile","similarities","some","s","id","render","backgroundColor","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAG,oBAAd;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAwD;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAkB;AACzB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,SAAS,EAAE;AADJ,KAAX;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,aAAL;AACH;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAsBC,SAAtB,EAA0CC,QAA1C,EAAwD;AACtE,QAAI;AAAEC,MAAAA;AAAF,QAAa,KAAKT,KAAtB;AACAM,IAAAA,SAAS,CAACG,OAAV,KAAsBA,OAAtB,GAAiC,KAAKL,aAAL,EAAjC,GACiC,KAAKM,QAAL,CAAc;AAACR,MAAAA,SAAS,EAAC;AAAX,KAAd,CADjC;AAEC;AAEL;AACJ;AACA;;;AACOE,EAAAA,aAAa,GAAa;AACxB,QAAI;AAACO,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAgBH,MAAAA;AAAhB,QAA2B,KAAKT,KAApC;;AACA,QAAGW,IAAI,CAACE,YAAL,CAAkBC,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASP,OAArC,CAAH,EAAiD;AAC7CG,MAAAA,OAAO,CAACD,IAAD,CAAP;AACA,WAAKD,QAAL,CAAc;AAACR,QAAAA,SAAS,EAACN;AAAX,OAAd;AACH;AACJ;;AAEFqB,EAAAA,MAAM,GAAE;AACJ,QAAI;AAACN,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAkB,KAAKZ,KAA3B;AACA,wBAAO;AAAM,MAAA,SAAS,EAAG,SAAlB;AACM,MAAA,KAAK,EAAE;AAACkB,QAAAA,eAAe,EAAE,KAAKjB,KAAL,CAAWC;AAA7B,OADb;AAEM,MAAA,OAAO,EAAE,MAAKU,OAAO,CAACD,IAAD,CAF3B;AAAA,gBAGUA,IAAI,CAACQ;AAHf;AAAA;AAAA;AAAA;AAAA,YAAP;AAIH;;AAlCmD;;AAqCxD,eAAetB,IAAf","sourcesContent":["import React from \"react\";\nimport {FileProps, FileState} from \"./file-interfaces\";\nconst color = \"rgb(235, 233, 233)\";\n\n\n/**\n * @class File\n * Represents a file in a directory\n * @description If the file contains the current similarity the user is looking at\n * It will send the contents of this file to Code class through parent(Plagiarism)\n */\nclass File extends React.Component<FileProps, FileState>{\n    constructor(props:FileProps) {\n        super(props);\n        this.state={\n            highlight: \"transparent\"\n        }\n    }\n\n    componentDidMount() {\n        this.highlightFile()\n    }\n    componentDidUpdate(prevProps:FileProps, prevState:FileState,snapshot:any) {\n        let { current} = this.props\n        prevProps.current !== current ?  this.highlightFile() :\n                                         this.setState({highlight:\"transparent\"})\n        }\n\n    /**\n     * set color of the file in dir if it contains the current similarity\n     */\n       highlightFile(this: File) {\n         let {item, setFile, current} = this.props\n         if(item.similarities.some(s => s.id === current)){\n             setFile(item)\n             this.setState({highlight:color})\n         }\n     }\n\n    render(){\n        let {item, setFile} = this.props\n        return <span className={`d-block`}\n                     style={{backgroundColor: this.state.highlight}}\n                     onClick={()=> setFile(item)}>\n                        {item.name}</span>\n    }\n}\n\nexport default File;\n"]},"metadata":{},"sourceType":"module"}