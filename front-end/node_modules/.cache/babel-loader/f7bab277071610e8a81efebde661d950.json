{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx\";\nimport React from \"react\";\nimport './code.css';\n\nclass Code extends React.Component {\n  constructor(props) {\n    super(props);\n    this.domRefs = {};\n\n    this.highlight = i => {\n      let col = \"\";\n      col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\";\n      this.props.similarities.forEach(s => {\n        if (s.id === this.props.current && s.startLine <= i && i <= s.endLine) {\n          col = \"red-current\";\n        }\n      });\n      return col;\n    };\n\n    this.setRef = (i, elem) => {\n      this.props.similarities.forEach(s => {\n        if (i === s.startLine) {\n          this.domRefs[`${s.id}`] = elem;\n        }\n      });\n    };\n\n    this.state = {\n      contents: {},\n      map: {}\n    };\n  }\n\n  componentDidMount() {\n    let {\n      current,\n      contents\n    } = this.props;\n\n    if (current) {\n      if (this.domRefs[current]) {\n        this.domRefs[current].scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    }\n\n    if (contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let {\n      current,\n      contents\n    } = this.props;\n\n    if (prevProps.current !== current) {\n      if (this.domRefs[current]) {\n        this.domRefs[current].scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    }\n\n    if (prevProps.contents !== contents) {\n      this.setState({\n        contents\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-container\",\n      children: Object.keys(this.state.contents).map((key, i) => /*#__PURE__*/_jsxDEV(\"code\", {\n        className: this.highlight(i),\n        ref: elem => this.setRef(i, elem),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"index\",\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), this.state.contents[key]]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Code;","map":{"version":3,"sources":["/Users/yasmin/WebstormProjects/software-front-ts/front-end/src/components/code/code.tsx"],"names":["React","Code","Component","constructor","props","domRefs","highlight","i","col","similarities","some","s","startLine","endLine","forEach","id","current","setRef","elem","state","contents","map","componentDidMount","scrollIntoView","behavior","setState","componentDidUpdate","prevProps","prevState","snapshot","render","Object","keys","key"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './code.css'\nimport {Similarity} from \"../file/file-interfaces\";\n\ninterface CodeProps {\n    contents: { [key: string]: string},\n    current:string,\n    similarities: (Similarity)[]\n}\ninterface CodeState {\n    contents: { [key: string]: string},\n    map: { [key: string]: HTMLElement},\n\n}\n\ninterface CodeIndex {\n\n}\n\n\nclass Code extends React.Component<CodeProps,CodeState> implements CodeIndex{\n    private domRefs: any = {}\n    constructor(props:CodeProps) {\n        super(props)\n\n\n        this.state={\n            contents: {},\n            map: {},\n\n        }\n\n    }\n\n\n\n    componentDidMount() {\n        let {current, contents} = this.props\n\n        if(current){\n\n                if(this.domRefs[current]) {\n\n                    this.domRefs[current].scrollIntoView({behavior:\"smooth\"})\n                }\n\n\n        }\n        if(contents){\n            this.setState({contents})\n        }\n    }\n\n\n    componentDidUpdate(prevProps:CodeProps, prevState:CodeState, snapshot:any) {\n        let {current, contents} = this.props\n\n        if(prevProps.current !== current){\n\n\n                if(this.domRefs[current]) {\n                    this.domRefs[current].scrollIntoView({behavior:\"smooth\"})\n                }\n\n        }\n\n        if(prevProps.contents !== contents){\n            this.setState({contents})\n        }\n\n    }\n\n\n\n\n    highlight = (i:number) =>{\n\n        let col = \"\"\n        col = this.props.similarities.some(s => s.startLine <= i && i <= s.endLine) ? \"red\" : \"\"\n        this.props.similarities.forEach(s => {\n            if(s.id === this.props.current && s.startLine <= i && i <= s.endLine){\n                col = \"red-current\"\n            }\n\n        })\n\n        return col;\n    }\n\n    //map ref to similarity id\n    setRef = (i:number, elem:any) =>{\n        this.props.similarities.forEach(s => {\n\n            if(i === s.startLine) {\n              this.domRefs[`${s.id}`] = elem\n            }\n\n       })\n\n    }\n\n\n    render() {\n\n        return <div className=\"file-container\">\n\n\n            {Object.keys(this.state.contents).map((key, i) => (\n\n                <code key={i} className={this.highlight(i)}\n                      ref={elem =>this.setRef(i, elem)}>\n\n                    <span className=\"index\" >{i}</span>\n                    {this.state.contents[key]}\n                 </code>))\n            }\n        </div>\n    }\n}\n\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}